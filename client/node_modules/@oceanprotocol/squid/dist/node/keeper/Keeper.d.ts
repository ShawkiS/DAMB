import DIDRegistry from "./contracts/DIDRegistry";
import Dispenser from "./contracts/Dispenser";
import OceanToken from "./contracts/Token";
import { Condition, LockRewardCondition, EscrowReward, AccessSecretStoreCondition } from "./contracts/conditions";
import { AgreementTemplate, EscrowAccessSecretStoreTemplate } from "./contracts/templates";
import { TemplateStoreManager, AgreementStoreManager, ConditionStoreManager } from "./contracts/managers";
import { EventHandler } from "./EventHandler";
import { Instantiable, InstantiableConfig } from "../Instantiable.abstract";
export declare class Keeper extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<Keeper>;
    token: OceanToken;
    dispenser: Dispenser;
    didRegistry: DIDRegistry;
    templateStoreManager: TemplateStoreManager;
    agreementStoreManager: AgreementStoreManager;
    conditionStoreManager: ConditionStoreManager;
    conditions: {
        lockRewardCondition: LockRewardCondition;
        escrowReward: EscrowReward;
        accessSecretStoreCondition: AccessSecretStoreCondition;
    };
    templates: {
        escrowAccessSecretStoreTemplate: EscrowAccessSecretStoreTemplate;
    };
    utils: {
        eventHandler: EventHandler;
    };
    getConditionByAddress(address: string): Condition;
    getTemplateByName(name: string): AgreementTemplate;
    getNetworkId(): Promise<number>;
    getNetworkName(): Promise<string>;
}
export default Keeper;
