import ContractBase from "../ContractBase";
import { InstantiableConfig } from "../../../Instantiable.abstract";
export declare enum ConditionState {
    Uninitialized = 0,
    Unfulfilled = 1,
    Fulfilled = 2,
    Aborted = 3
}
export declare const conditionStateNames: string[];
export declare abstract class Condition extends ContractBase {
    static getInstance(config: InstantiableConfig, conditionName: string, conditionsClass: any): Promise<Condition & any>;
    protected constructor(contractName: string);
    hashValues(...args: any[]): Promise<string>;
    fulfill(agreementId: string, ...args: any[]): any;
    generateIdHash(agreementId: string, ...values: any[]): Promise<string>;
    generateId(agreementId: string, valueHash: string): Promise<string>;
    abortByTimeOut(agreementId: string, from?: string): Promise<any>;
    getConditionFulfilledEvent(agreementId: string): import("../../ContractEvent").ContractEvent;
}
