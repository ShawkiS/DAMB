"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ContractBase_1 = require("../ContractBase");
var utils_1 = require("../../../utils");
var ConditionState;
(function (ConditionState) {
    ConditionState[ConditionState["Uninitialized"] = 0] = "Uninitialized";
    ConditionState[ConditionState["Unfulfilled"] = 1] = "Unfulfilled";
    ConditionState[ConditionState["Fulfilled"] = 2] = "Fulfilled";
    ConditionState[ConditionState["Aborted"] = 3] = "Aborted";
})(ConditionState = exports.ConditionState || (exports.ConditionState = {}));
exports.conditionStateNames = ["Uninitialized", "Unfulfilled", "Fulfilled", "Aborted"];
var Condition = (function (_super) {
    __extends(Condition, _super);
    function Condition(contractName) {
        return _super.call(this, contractName) || this;
    }
    Condition.getInstance = function (config, conditionName, conditionsClass) {
        return __awaiter(this, void 0, void 0, function () {
            var condition;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        condition = new conditionsClass(conditionName);
                        return [4, condition.init(config)];
                    case 1:
                        _a.sent();
                        return [2, condition];
                }
            });
        });
    };
    Condition.prototype.hashValues = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.call("hashValues", args);
    };
    Condition.prototype.fulfill = function (agreementId, args, from) {
        return this.sendFrom("fulfill", [utils_1.zeroX(agreementId)].concat(args), from);
    };
    Condition.prototype.generateIdHash = function (agreementId) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.generateId;
                        _b = [agreementId];
                        return [4, this.hashValues.apply(this, values)];
                    case 1: return [2, _a.apply(this, _b.concat([_c.sent()]))];
                }
            });
        });
    };
    Condition.prototype.generateId = function (agreementId, valueHash) {
        return this.call("generateId", [utils_1.zeroX(agreementId), valueHash]);
    };
    Condition.prototype.abortByTimeOut = function (agreementId, from) {
        return this.sendFrom("abortByTimeOut", [utils_1.zeroX(agreementId)], from);
    };
    Condition.prototype.getConditionFulfilledEvent = function (agreementId) {
        return this.getEvent("Fulfilled", { agreementId: utils_1.zeroX(agreementId) });
    };
    return Condition;
}(ContractBase_1.default));
exports.Condition = Condition;
//# sourceMappingURL=Condition.abstract.js.map