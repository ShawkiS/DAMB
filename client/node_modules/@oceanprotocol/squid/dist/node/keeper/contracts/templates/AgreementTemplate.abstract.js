"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ContractBase_1 = require("../ContractBase");
var Condition_abstract_1 = require("../conditions/Condition.abstract");
var utils_1 = require("../../../utils");
var AgreementTemplate = (function (_super) {
    __extends(AgreementTemplate, _super);
    function AgreementTemplate(contractName) {
        return _super.call(this, contractName) || this;
    }
    AgreementTemplate.getInstance = function (config, conditionName, templateClass) {
        return __awaiter(this, void 0, void 0, function () {
            var condition;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        condition = new templateClass(conditionName);
                        return [4, condition.init(config)];
                    case 1:
                        _a.sent();
                        return [2, condition];
                }
            });
        });
    };
    AgreementTemplate.prototype.createAgreement = function (agreementId, did, conditionIds, timeLocks, timeOuts, extraArgs, from) {
        return this.sendFrom("createAgreement", [
            utils_1.zeroX(agreementId),
            utils_1.zeroX(did),
            conditionIds.map(utils_1.zeroX),
            timeLocks,
            timeOuts
        ].concat(extraArgs), from);
    };
    AgreementTemplate.prototype.getConditionTypes = function () {
        return this.call("getConditionTypes", []);
    };
    AgreementTemplate.prototype.getConditions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getConditionTypes()];
                    case 1: return [2, (_a.sent())
                            .map(function (address) { return _this.ocean.keeper.getConditionByAddress(address); })];
                }
            });
        });
    };
    AgreementTemplate.prototype.getServiceAgreementTemplateConditions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var serviceAgreementTemplate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getServiceAgreementTemplate()];
                    case 1:
                        serviceAgreementTemplate = _a.sent();
                        return [2, serviceAgreementTemplate.conditions];
                }
            });
        });
    };
    AgreementTemplate.prototype.getServiceAgreementTemplateConditionByRef = function (ref) {
        return __awaiter(this, void 0, void 0, function () {
            var name;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getServiceAgreementTemplateConditions()];
                    case 1:
                        name = (_a.sent())
                            .find(function (_a) {
                            var conditionRef = _a.name;
                            return conditionRef === ref;
                        })
                            .contractName;
                        return [4, this.getConditions()];
                    case 2: return [2, (_a.sent())
                            .find(function (condition) { return condition.contractName === name; })];
                }
            });
        });
    };
    AgreementTemplate.prototype.getServiceAgreementTemplateDependencies = function () {
        return __awaiter(this, void 0, void 0, function () {
            var serviceAgreementTemplate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getServiceAgreementTemplate()];
                    case 1:
                        serviceAgreementTemplate = _a.sent();
                        return [2, serviceAgreementTemplate.conditionDependency];
                }
            });
        });
    };
    AgreementTemplate.prototype.getAgreementStatus = function (agreementId) {
        return __awaiter(this, void 0, void 0, function () {
            var agreementStore, conditionStore, dependencies, conditionIds, conditionIdByConddition, statesPromises, states;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        agreementStore = this.ocean.keeper.agreementStoreManager;
                        conditionStore = this.ocean.keeper.conditionStoreManager;
                        return [4, this.getServiceAgreementTemplateDependencies()];
                    case 1:
                        dependencies = _a.sent();
                        return [4, agreementStore.getAgreement(agreementId)];
                    case 2:
                        conditionIds = (_a.sent()).conditionIds;
                        if (!conditionIds.length) {
                            this.logger.error("Agreement not creeated yet: \"" + agreementId + "\"");
                            return [2, false];
                        }
                        return [4, this.getConditions()];
                    case 3:
                        conditionIdByConddition = (_a.sent())
                            .reduce(function (acc, _a, i) {
                            var contractName = _a.contractName;
                            var _b;
                            return (__assign({}, acc, (_b = {}, _b[contractName] = conditionIds[i], _b)));
                        }, {});
                        statesPromises = Object.keys(dependencies)
                            .map(function (ref, i) { return __awaiter(_this, void 0, void 0, function () {
                            var contractName, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4, this.getServiceAgreementTemplateConditionByRef(ref)];
                                    case 1:
                                        contractName = (_b.sent()).contractName;
                                        _a = {
                                            ref: ref,
                                            contractName: contractName
                                        };
                                        return [4, conditionStore.getCondition(conditionIdByConddition[contractName])];
                                    case 2: return [2, (_a.state = (_b.sent()).state,
                                            _a)];
                                }
                            });
                        }); });
                        return [4, Promise.all(statesPromises)];
                    case 4:
                        states = _a.sent();
                        return [2, states
                                .reduce(function (acc, _a) {
                                var contractName = _a.contractName, ref = _a.ref, state = _a.state;
                                var _b;
                                var blockers = dependencies[ref]
                                    .map(function (dependency) { return states.find(function (_) { return _.ref === dependency; }); })
                                    .filter(function (condition) { return condition.state !== Condition_abstract_1.ConditionState.Fulfilled; });
                                return __assign({}, acc, (_b = {}, _b[ref] = {
                                    condition: ref,
                                    contractName: contractName,
                                    state: state,
                                    blocked: !!blockers.length,
                                    blockedBy: blockers.map(function (_) { return _.ref; }),
                                }, _b));
                            }, {})];
                }
            });
        });
    };
    AgreementTemplate.prototype.printAgreementStatus = function (agreementId) {
        return __awaiter(this, void 0, void 0, function () {
            var status;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getAgreementStatus(agreementId)];
                    case 1:
                        status = _a.sent();
                        this.logger.bypass("-".repeat(80));
                        this.logger.bypass("Template:", this.contractName);
                        this.logger.bypass("Agreement ID:", agreementId);
                        this.logger.bypass("-".repeat(40));
                        if (!status) {
                            this.logger.bypass("Agreement not created yet!");
                        }
                        Object.values(status || [])
                            .forEach(function (_a, i) {
                            var condition = _a.condition, contractName = _a.contractName, state = _a.state, blocked = _a.blocked, blockedBy = _a.blockedBy;
                            if (i) {
                                _this.logger.bypass("-".repeat(20));
                            }
                            _this.logger.bypass(condition + " (" + contractName + ")");
                            _this.logger.bypass("  Status:", state, "(" + Condition_abstract_1.conditionStateNames[state] + ")");
                            if (blocked) {
                                _this.logger.bypass("  Blocked by:", blockedBy);
                            }
                        });
                        this.logger.bypass("-".repeat(80));
                        return [2];
                }
            });
        });
    };
    AgreementTemplate.prototype.getAgreementCreatedEvent = function (agreementId) {
        return this.getEvent("AgreementCreated", { agreementId: utils_1.zeroX(agreementId) });
    };
    return AgreementTemplate;
}(ContractBase_1.default));
exports.AgreementTemplate = AgreementTemplate;
//# sourceMappingURL=AgreementTemplate.abstract.js.map