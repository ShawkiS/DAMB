"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var DDO_1 = require("../ddo/DDO");
var DID_1 = require("./DID");
var utils_1 = require("../utils");
var Instantiable_abstract_1 = require("../Instantiable.abstract");
var OceanAssets = (function (_super) {
    __extends(OceanAssets, _super);
    function OceanAssets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OceanAssets.getInstance = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                instance = new OceanAssets();
                instance.setInstanceConfig(config);
                return [2, instance];
            });
        });
    };
    OceanAssets.prototype.resolve = function (did) {
        return __awaiter(this, void 0, void 0, function () {
            var d;
            return __generator(this, function (_a) {
                d = DID_1.default.parse(did);
                return [2, this.ocean.aquarius.retrieveDDO(d)];
            });
        });
    };
    OceanAssets.prototype.create = function (metadata, publisher, services) {
        if (services === void 0) { services = []; }
        return __awaiter(this, void 0, void 0, function () {
            var secretStoreUri, _a, didRegistry, templates, did, encryptedFiles, serviceAgreementTemplate, serviceEndpoint, serviceDefinitionIdCount, ddo, _b, _c, _d, rawConditions, conditions, storedDdo;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        secretStoreUri = this.config.secretStoreUri;
                        _a = this.ocean.keeper, didRegistry = _a.didRegistry, templates = _a.templates;
                        did = DID_1.default.generate();
                        return [4, this.ocean.secretStore.encrypt(did.getId(), metadata.base.files, publisher)];
                    case 1:
                        encryptedFiles = _e.sent();
                        return [4, templates.escrowAccessSecretStoreTemplate.getServiceAgreementTemplate()];
                    case 2:
                        serviceAgreementTemplate = _e.sent();
                        serviceEndpoint = this.ocean.aquarius.getServiceEndpoint(did);
                        serviceDefinitionIdCount = 0;
                        _b = DDO_1.DDO.bind;
                        _c = {
                            id: did.getDid(),
                            authentication: [{
                                    type: "RsaSignatureAuthentication2018",
                                    publicKey: did.getDid() + "#keys-1",
                                }]
                        };
                        _d = {
                            id: did.getDid() + "#keys-1",
                            type: "Ed25519VerificationKey2018",
                            owner: did.getDid()
                        };
                        return [4, publisher.getPublicKey()];
                    case 3:
                        ddo = new (_b.apply(DDO_1.DDO, [void 0, (_c.publicKey = [
                                (_d.publicKeyBase58 = _e.sent(),
                                    _d)
                            ],
                                _c.service = [
                                    {
                                        type: "Access",
                                        purchaseEndpoint: this.ocean.brizo.getPurchaseEndpoint(),
                                        serviceEndpoint: this.ocean.brizo.getConsumeEndpoint(),
                                        serviceDefinitionId: String(serviceDefinitionIdCount++),
                                        templateId: templates.escrowAccessSecretStoreTemplate.getAddress(),
                                        serviceAgreementTemplate: serviceAgreementTemplate,
                                    },
                                    {
                                        type: "Compute",
                                        serviceEndpoint: this.ocean.brizo.getComputeEndpoint(publisher.getId(), String(serviceDefinitionIdCount), "xxx", "xxx"),
                                        serviceDefinitionId: String(serviceDefinitionIdCount++),
                                    },
                                    {
                                        type: "Authorization",
                                        services: "SecretStore",
                                        serviceEndpoint: secretStoreUri,
                                        serviceDefinitionId: String(serviceDefinitionIdCount++),
                                    },
                                    {
                                        type: "Metadata",
                                        serviceEndpoint: serviceEndpoint,
                                        serviceDefinitionId: String(serviceDefinitionIdCount++),
                                        metadata: __assign({ curation: {
                                                rating: 0,
                                                numVotes: 0,
                                            }, additionalInformation: {
                                                updateFrecuency: "yearly",
                                                structuredMarkup: [],
                                            } }, metadata, { base: __assign({}, metadata.base, { contentUrls: [], encryptedFiles: encryptedFiles, files: metadata.base.files
                                                    .map(function (file, index) { return (__assign({}, file, { index: index, url: undefined })); }) }) }),
                                    }
                                ].concat(services
                                    .map(function (_) { return (__assign({}, _, { serviceDefinitionId: String(serviceDefinitionIdCount++) })); })).reverse()
                                    .filter(function (_a, i, list) {
                                    var type = _a.type;
                                    return list.findIndex(function (_a) {
                                        var t = _a.type;
                                        return t === type;
                                    }) === i;
                                })
                                    .reverse(),
                                _c)]))();
                        return [4, templates.escrowAccessSecretStoreTemplate.getServiceAgreementTemplateConditions()];
                    case 4:
                        rawConditions = _e.sent();
                        conditions = utils_1.fillConditionsWithDDO(rawConditions, ddo);
                        serviceAgreementTemplate.conditions = conditions;
                        ddo.addChecksum();
                        return [4, ddo.addProof(this.ocean, publisher.getId(), publisher.getPassword())];
                    case 5:
                        _e.sent();
                        return [4, this.ocean.aquarius.storeDDO(ddo)];
                    case 6:
                        storedDdo = _e.sent();
                        return [4, didRegistry.registerAttribute(did.getId(), ddo.getChecksum(), [this.config.brizoAddress], serviceEndpoint, publisher.getId())];
                    case 7:
                        _e.sent();
                        return [2, storedDdo];
                }
            });
        });
    };
    OceanAssets.prototype.consume = function (agreementId, did, serviceDefinitionId, consumerAccount, resultPath, index) {
        if (index === void 0) { index = -1; }
        return __awaiter(this, void 0, void 0, function () {
            var ddo, metadata, accessService, files, serviceEndpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.resolve(did)];
                    case 1:
                        ddo = _a.sent();
                        metadata = ddo.findServiceByType("Metadata").metadata;
                        accessService = ddo.findServiceById(serviceDefinitionId);
                        files = metadata.base.files;
                        serviceEndpoint = accessService.serviceEndpoint;
                        if (!serviceEndpoint) {
                            throw new Error("Consume asset failed, service definition is missing the `serviceEndpoint`.");
                        }
                        this.logger.log("Consuming files");
                        resultPath = resultPath ? resultPath + "/datafile." + ddo.shortId() + "." + agreementId + "/" : undefined;
                        return [4, this.ocean.brizo.consumeService(agreementId, serviceEndpoint, consumerAccount, files, resultPath, index)];
                    case 2:
                        _a.sent();
                        this.logger.log("Files consumed");
                        if (resultPath) {
                            return [2, resultPath];
                        }
                        return [2, true];
                }
            });
        });
    };
    OceanAssets.prototype.order = function (did, serviceDefinitionId, consumer) {
        return __awaiter(this, void 0, void 0, function () {
            var oceanAgreements, _a, agreementId, signature, ddo, keeper, templateName, template, accessCondition, paymentFlow, e_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        oceanAgreements = this.ocean.agreements;
                        this.logger.log("Asking for agreement signature");
                        return [4, oceanAgreements.prepare(did, serviceDefinitionId, consumer)];
                    case 1:
                        _a = _b.sent(), agreementId = _a.agreementId, signature = _a.signature;
                        this.logger.log("Agreement " + agreementId + " signed");
                        return [4, this.resolve(did)];
                    case 2:
                        ddo = _b.sent();
                        keeper = this.ocean.keeper;
                        templateName = ddo.findServiceByType("Access").serviceAgreementTemplate.contractName;
                        template = keeper.getTemplateByName(templateName);
                        accessCondition = keeper.conditions.accessSecretStoreCondition;
                        paymentFlow = new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var metadata, paid;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, template.getAgreementCreatedEvent(agreementId).once()];
                                    case 1:
                                        _a.sent();
                                        this.logger.log("Agreement initialized");
                                        metadata = ddo.findServiceByType("Metadata").metadata;
                                        this.logger.log("Locking payment");
                                        return [4, oceanAgreements.conditions.lockReward(agreementId, metadata.base.price, consumer)];
                                    case 2:
                                        paid = _a.sent();
                                        if (paid) {
                                            this.logger.log("Payment was OK");
                                        }
                                        else {
                                            this.logger.error("Payment was KO");
                                            this.logger.error("Agreement ID: ", agreementId);
                                            this.logger.error("DID: ", ddo.id);
                                            reject("Error on payment");
                                        }
                                        return [4, accessCondition.getConditionFulfilledEvent(agreementId).once()];
                                    case 3:
                                        _a.sent();
                                        this.logger.log("Access granted");
                                        resolve();
                                        return [2];
                                }
                            });
                        }); });
                        this.logger.log("Sending agreement request");
                        return [4, oceanAgreements.send(did, agreementId, serviceDefinitionId, signature, consumer)];
                    case 3:
                        _b.sent();
                        this.logger.log("Agreement request sent");
                        _b.label = 4;
                    case 4:
                        _b.trys.push([4, 6, , 7]);
                        return [4, paymentFlow];
                    case 5:
                        _b.sent();
                        return [3, 7];
                    case 6:
                        e_1 = _b.sent();
                        throw new Error("Error paying the asset.");
                    case 7: return [2, agreementId];
                }
            });
        });
    };
    OceanAssets.prototype.query = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.ocean.aquarius.queryMetadata(query)];
            });
        });
    };
    OceanAssets.prototype.search = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.ocean.aquarius.queryMetadataByText({
                        text: text,
                        page: 0,
                        offset: 100,
                        query: {
                            value: 1,
                        },
                        sort: {
                            value: 1,
                        },
                    })];
            });
        });
    };
    return OceanAssets;
}(Instantiable_abstract_1.Instantiable));
exports.OceanAssets = OceanAssets;
//# sourceMappingURL=OceanAssets.js.map