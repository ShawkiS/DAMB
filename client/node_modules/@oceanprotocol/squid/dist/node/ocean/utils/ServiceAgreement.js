"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils");
var Instantiable_abstract_1 = require("../../Instantiable.abstract");
var ServiceAgreement = (function (_super) {
    __extends(ServiceAgreement, _super);
    function ServiceAgreement(config) {
        var _this = _super.call(this) || this;
        _this.setInstanceConfig(config);
        return _this;
    }
    ServiceAgreement.prototype.signServiceAgreement = function (ddo, serviceDefinitionId, serviceAgreementId, agreementConditionsIds, consumer) {
        return __awaiter(this, void 0, void 0, function () {
            var service, timelockValues, timeoutValues, serviceAgreementHashSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        service = ddo.findServiceById(serviceDefinitionId);
                        timelockValues = this.getTimeValuesFromService(service, "timelock");
                        timeoutValues = this.getTimeValuesFromService(service, "timeout");
                        if (!service.templateId) {
                            throw new Error("TemplateId not found in DDO.");
                        }
                        return [4, this.createHashSignature(service.templateId, serviceAgreementId, agreementConditionsIds, timelockValues, timeoutValues, consumer)];
                    case 1:
                        serviceAgreementHashSignature = _a.sent();
                        this.logger.debug("SA hash signature:", serviceAgreementHashSignature);
                        return [2, serviceAgreementHashSignature];
                }
            });
        });
    };
    ServiceAgreement.prototype.createHashSignature = function (templateId, serviceAgreementId, valueHashes, timelockValues, timeoutValues, consumer) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceAgreementHash, serviceAgreementHashSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        serviceAgreementHash = this.hashServiceAgreement(templateId, serviceAgreementId, valueHashes, timelockValues, timeoutValues);
                        return [4, this.ocean.utils.signature
                                .signText(serviceAgreementHash, consumer.getId(), consumer.getPassword())];
                    case 1:
                        serviceAgreementHashSignature = _a.sent();
                        return [2, serviceAgreementHashSignature];
                }
            });
        });
    };
    ServiceAgreement.prototype.hashServiceAgreement = function (serviceAgreementTemplateId, serviceAgreementId, valueHashes, timelocks, timeouts) {
        var _a;
        var args = [
            { type: "address", value: utils_1.zeroX(serviceAgreementTemplateId) },
            { type: "bytes32[]", value: valueHashes.map(utils_1.zeroX) },
            { type: "uint256[]", value: timelocks },
            { type: "uint256[]", value: timeouts },
            { type: "bytes32", value: utils_1.zeroX(serviceAgreementId) },
        ];
        return (_a = this.web3.utils).soliditySha3.apply(_a, args).toString("hex");
    };
    ServiceAgreement.prototype.getTimeValuesFromService = function (service, type) {
        var timeoutValues = service.serviceAgreementTemplate.conditions
            .map(function (condition) { return condition[type]; });
        return timeoutValues;
    };
    return ServiceAgreement;
}(Instantiable_abstract_1.Instantiable));
exports.ServiceAgreement = ServiceAgreement;
//# sourceMappingURL=ServiceAgreement.js.map