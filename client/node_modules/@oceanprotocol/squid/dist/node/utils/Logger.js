"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = -1] = "None";
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Log"] = 2] = "Log";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = (function () {
    function Logger(logLevel) {
        if (logLevel === void 0) { logLevel = LogLevel.Verbose; }
        this.logLevel = logLevel;
    }
    Logger.prototype.setLevel = function (logLevel) {
        this.logLevel = logLevel;
    };
    Logger.prototype.bypass = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, ["log", -Infinity].concat(args));
    };
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, ["debug", LogLevel.Verbose].concat(args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, ["log", LogLevel.Log].concat(args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, ["warn", LogLevel.Warn].concat(args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, ["error", LogLevel.Error].concat(args));
    };
    Logger.prototype.dispatch = function (verb, level) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (this.logLevel >= level) {
            console[verb].apply(console, args);
        }
    };
    return Logger;
}());
exports.Logger = Logger;
exports.LoggerInstance = new Logger();
exports.default = exports.LoggerInstance;
//# sourceMappingURL=Logger.js.map