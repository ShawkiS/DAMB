{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\src\\\\components\\\\atoms\\\\Form\\\\Input.tsx\";\nimport cx from 'classnames';\nimport React, { PureComponent } from 'react';\nimport slugify from 'slugify';\nimport DatePicker from 'react-datepicker';\nimport { ReactComponent as SearchIcon } from \"@svgr/webpack?-svgo,+ref!../../../img/search.svg\";\nimport Help from './Help';\nimport Label from './Label';\nimport Row from './Row';\nimport InputGroup from './InputGroup';\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport styles from './Input.module.scss';\n\nvar Input =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Input, _PureComponent);\n\n  function Input() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isFocused: false,\n      dateCreated: new Date()\n    };\n\n    _this.toggleFocus = function () {\n      _this.setState({\n        isFocused: !_this.state.isFocused\n      });\n    };\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        dateCreated: date\n      });\n\n      var event = {\n        currentTarget: {\n          name: 'dateCreated',\n          value: date\n        }\n      };\n\n      _this.props.onChange(event);\n    };\n\n    _this.InputComponent = function () {\n      var _this$props = _this.props,\n          type = _this$props.type,\n          options = _this$props.options,\n          group = _this$props.group,\n          name = _this$props.name,\n          required = _this$props.required,\n          onChange = _this$props.onChange,\n          value = _this$props.value;\n\n      var wrapClass = _this.inputWrapClasses();\n\n      switch (type) {\n        case 'select':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(\"select\", {\n            id: name,\n            className: styles.select,\n            name: name,\n            required: required,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus,\n            onChange: onChange,\n            value: value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \"---\"), options && options.sort(function (a, b) {\n            return a.localeCompare(b);\n          }).map(function (option, index) {\n            return React.createElement(\"option\", {\n              key: index,\n              value: option,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108\n              },\n              __self: this\n            }, option);\n          })));\n\n        case 'textarea':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(\"textarea\", Object.assign({\n            id: name,\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus\n          }, _this.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          })));\n\n        case 'radio':\n        case 'checkbox':\n          return React.createElement(\"div\", {\n            className: styles.radioGroup,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, options && options.map(function (option, index) {\n            return React.createElement(\"div\", {\n              className: styles.radioWrap,\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            }, React.createElement(\"input\", {\n              className: styles.radio,\n              id: slugify(option, {\n                lower: true\n              }),\n              type: type,\n              name: name,\n              value: slugify(option, {\n                lower: true\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134\n              },\n              __self: this\n            }), React.createElement(\"label\", {\n              className: styles.radioLabel,\n              htmlFor: slugify(option, {\n                lower: true\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 145\n              },\n              __self: this\n            }, option));\n          }));\n\n        case 'date':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 159\n            },\n            __self: this\n          }, React.createElement(DatePicker, {\n            selected: _this.state.dateCreated,\n            onChange: _this.handleDateChange,\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus,\n            id: name,\n            name: name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }));\n      }\n\n      return React.createElement(\"div\", {\n        className: wrapClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, group ? React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({\n        id: name,\n        className: styles.input,\n        onFocus: _this.toggleFocus,\n        onBlur: _this.toggleFocus\n      }, _this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })), group) : React.createElement(\"input\", Object.assign({\n        id: name,\n        className: styles.input,\n        onFocus: _this.toggleFocus,\n        onBlur: _this.toggleFocus\n      }, _this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      })), type === 'search' && React.createElement(SearchIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"inputWrapClasses\",\n    value: function inputWrapClasses() {\n      if (this.props.type === 'search') {\n        return styles.inputWrapSearch;\n      } else if (this.props.type === 'search' && this.state.isFocused) {\n        return cx(styles.inputWrapSearch, styles.isFocused);\n      } else if (this.state.isFocused && this.props.type !== 'search') {\n        return cx(styles.inputWrap, styles.isFocused);\n      } else {\n        return styles.inputWrap;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          label = _this$props2.label,\n          required = _this$props2.required,\n          help = _this$props2.help,\n          additionalComponent = _this$props2.additionalComponent,\n          multiple = _this$props2.multiple;\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: name,\n        required: required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, label), React.createElement(this.InputComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), help && React.createElement(Help, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, help), multiple && 'hello', additionalComponent && additionalComponent);\n    }\n  }]);\n\n  return Input;\n}(PureComponent);\n\nexport { Input as default };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\DAMB-Marketplace\\client\\src\\components\\atoms\\Form\\Input.tsx"],"names":["cx","React","PureComponent","slugify","DatePicker","Help","Label","Row","InputGroup","styles","Input","state","isFocused","dateCreated","Date","toggleFocus","setState","handleDateChange","date","event","currentTarget","name","value","props","onChange","InputComponent","type","options","group","required","wrapClass","inputWrapClasses","select","sort","a","b","localeCompare","map","option","index","input","radioGroup","radioWrap","radio","lower","radioLabel","inputWrapSearch","inputWrap","label","help","additionalComponent","multiple"],"mappings":"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","sourcesContent":["import cx from 'classnames'\nimport React, { PureComponent, FormEvent, ChangeEvent } from 'react'\nimport slugify from 'slugify'\nimport DatePicker from 'react-datepicker'\nimport { ReactComponent as SearchIcon } from '../../../img/search.svg'\nimport Help from './Help'\nimport Label from './Label'\nimport Row from './Row'\nimport InputGroup from './InputGroup'\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css'\nimport styles from './Input.module.scss'\n\ninterface InputProps {\n    name: string\n    label: string\n    placeholder?: string\n    required?: boolean\n    help?: string\n    tag?: string\n    type?: string\n    options?: string[]\n    additionalComponent?: any\n    value?: string\n    onChange?(\n        event:\n            | FormEvent<HTMLInputElement>\n            | ChangeEvent<HTMLInputElement>\n            | ChangeEvent<HTMLSelectElement>\n            | ChangeEvent<HTMLTextAreaElement>\n    ): void\n    rows?: number\n    group?: any\n    multiple?: boolean\n}\n\ninterface InputState {\n    isFocused: boolean\n    dateCreated?: Date\n}\n\nexport default class Input extends PureComponent<InputProps, InputState> {\n    public state: InputState = {\n        isFocused: false,\n        dateCreated: new Date()\n    }\n\n    public inputWrapClasses() {\n        if (this.props.type === 'search') {\n            return styles.inputWrapSearch\n        } else if (this.props.type === 'search' && this.state.isFocused) {\n            return cx(styles.inputWrapSearch, styles.isFocused)\n        } else if (this.state.isFocused && this.props.type !== 'search') {\n            return cx(styles.inputWrap, styles.isFocused)\n        } else {\n            return styles.inputWrap\n        }\n    }\n\n    public toggleFocus = () => {\n        this.setState({ isFocused: !this.state.isFocused })\n    }\n\n    private handleDateChange = (date: Date) => {\n        this.setState({\n            dateCreated: date\n        })\n        const event = {\n            currentTarget: {\n                name: 'dateCreated',\n                value: date\n            }\n        }\n        this.props.onChange!(event as any)\n    }\n\n    public InputComponent = () => {\n        const {\n            type,\n            options,\n            group,\n            name,\n            required,\n            onChange,\n            value\n        } = this.props\n\n        const wrapClass = this.inputWrapClasses()\n\n        switch (type) {\n            case 'select':\n                return (\n                    <div className={wrapClass}>\n                        <select\n                            id={name}\n                            className={styles.select}\n                            name={name}\n                            required={required}\n                            onFocus={this.toggleFocus}\n                            onBlur={this.toggleFocus}\n                            onChange={onChange}\n                            value={value}\n                        >\n                            <option value=\"\">---</option>\n                            {options &&\n                                options\n                                    .sort((a, b) => a.localeCompare(b))\n                                    .map((option: string, index: number) => (\n                                        <option key={index} value={option}>\n                                            {option}\n                                        </option>\n                                    ))}\n                        </select>\n                    </div>\n                )\n            case 'textarea':\n                return (\n                    <div className={wrapClass}>\n                        <textarea\n                            id={name}\n                            className={styles.input}\n                            onFocus={this.toggleFocus}\n                            onBlur={this.toggleFocus}\n                            {...this.props}\n                        />\n                    </div>\n                )\n            case 'radio':\n            case 'checkbox':\n                return (\n                    <div className={styles.radioGroup}>\n                        {options &&\n                            options.map((option: string, index: number) => (\n                                <div className={styles.radioWrap} key={index}>\n                                    <input\n                                        className={styles.radio}\n                                        id={slugify(option, {\n                                            lower: true\n                                        })}\n                                        type={type}\n                                        name={name}\n                                        value={slugify(option, {\n                                            lower: true\n                                        })}\n                                    />\n                                    <label\n                                        className={styles.radioLabel}\n                                        htmlFor={slugify(option, {\n                                            lower: true\n                                        })}\n                                    >\n                                        {option}\n                                    </label>\n                                </div>\n                            ))}\n                    </div>\n                )\n            case 'date':\n                return (\n                    <div className={wrapClass}>\n                        <DatePicker\n                            selected={this.state.dateCreated}\n                            onChange={this.handleDateChange}\n                            className={styles.input}\n                            onFocus={this.toggleFocus}\n                            onBlur={this.toggleFocus}\n                            id={name}\n                            name={name}\n                        />\n                    </div>\n                )\n        }\n\n        return (\n            <div className={wrapClass}>\n                {group ? (\n                    <InputGroup>\n                        <input\n                            id={name}\n                            className={styles.input}\n                            onFocus={this.toggleFocus}\n                            onBlur={this.toggleFocus}\n                            {...this.props}\n                        />\n                        {group}\n                    </InputGroup>\n                ) : (\n                    <input\n                        id={name}\n                        className={styles.input}\n                        onFocus={this.toggleFocus}\n                        onBlur={this.toggleFocus}\n                        {...this.props}\n                    />\n                )}\n\n                {type === 'search' && <SearchIcon />}\n            </div>\n        )\n    }\n\n    public render() {\n        const {\n            name,\n            label,\n            required,\n            help,\n            additionalComponent,\n            multiple\n        } = this.props\n\n        return (\n            <Row>\n                <Label htmlFor={name} required={required}>\n                    {label}\n                </Label>\n\n                <this.InputComponent />\n\n                {help && <Help>{help}</Help>}\n\n                {multiple && 'hello'}\n\n                {additionalComponent && additionalComponent}\n            </Row>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}