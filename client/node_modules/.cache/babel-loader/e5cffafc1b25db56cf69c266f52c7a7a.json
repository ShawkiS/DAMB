{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\src\\\\components\\\\organisms\\\\Add.tsx\";\nimport React, { useState, useEffect, Component } from 'react';\nimport useIpfsApi from '../../hooks/use-ipfs-api';\nimport { formatBytes, addToIpfs } from '../../utils';\nimport { site } from '../../site.config';\nimport Dropzone from '../atoms/Dropzone';\nimport styles from './Add.module.css';\nimport Spinner from '../atoms/Spinner';\nimport Button from '../atoms/Button';\nimport Input from '../atoms/Form/Input';\n\nvar _ref = new URL(site.ipfsNodeUri),\n    hostname = _ref.hostname,\n    port = _ref.port,\n    protocol = _ref.protocol;\n\nvar ipfsConfig = {\n  protocol: protocol.replace(':', ''),\n  host: hostname,\n  port: port || '443'\n};\n\nvar Add =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Add, _Component);\n\n  function Add() {\n    var _this;\n\n    _classCallCheck(this, Add);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Add).call(this, {}));\n\n    var _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        message = _useState2[0],\n        setMessage = _useState2[1];\n\n    var _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n    var _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        fileSize = _useState6[0],\n        setFileSize = _useState6[1];\n\n    var _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 1),\n        fileSizeReceived = _useState8[0];\n\n    useEffect(function () {\n      setMessage(\"Adding to IPFS<br />  <small>\".concat(fileSizeReceived || 0, \"/\").concat(fileSize, \"</small><br />\"));\n    }, [fileSize, fileSizeReceived]);\n    return _this;\n  }\n\n  _createClass(Add, [{\n    key: \"handleOnDrop\",\n    value: function handleOnDrop(acceptedFiles) {\n      var _useIpfsApi = useIpfsApi(ipfsConfig),\n          ipfs = _useIpfsApi.ipfs,\n          isIpfsReady = _useIpfsApi.isIpfsReady,\n          ipfsError = _useIpfsApi.ipfsError;\n\n      var _useState9 = useState(),\n          _useState10 = _slicedToArray(_useState9, 2),\n          fileHash = _useState10[0],\n          setFileHash = _useState10[1];\n\n      var _useState11 = useState(false),\n          _useState12 = _slicedToArray(_useState11, 2),\n          loading = _useState12[0],\n          setLoading = _useState12[1];\n\n      var _useState13 = useState(),\n          _useState14 = _slicedToArray(_useState13, 2),\n          error = _useState14[0],\n          setError = _useState14[1];\n\n      var _useState15 = useState(),\n          _useState16 = _slicedToArray(_useState15, 2),\n          fileSize = _useState16[0],\n          setFileSize = _useState16[1];\n\n      if (!acceptedFiles[0]) return;\n      setLoading(true);\n      setError(null);\n      var totalSize = formatBytes(acceptedFiles[0].size, 0);\n      setFileSize(totalSize);\n\n      try {\n        var cid = addToIpfs(acceptedFiles, ipfs);\n        if (!cid) return;\n        setFileHash(cid);\n        setLoading(false);\n      } catch (error) {\n        setError(\"Adding to IPFS failed: \".concat(error.message));\n        return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _useIpfsApi2 = useIpfsApi(ipfsConfig),\n          ipfs = _useIpfsApi2.ipfs,\n          isIpfsReady = _useIpfsApi2.isIpfsReady,\n          ipfsError = _useIpfsApi2.ipfsError;\n\n      var _useState17 = useState(),\n          _useState18 = _slicedToArray(_useState17, 2),\n          fileHash = _useState18[0],\n          setFileHash = _useState18[1];\n\n      var _useState19 = useState(false),\n          _useState20 = _slicedToArray(_useState19, 2),\n          loading = _useState20[0],\n          setLoading = _useState20[1];\n\n      var _useState21 = useState(),\n          _useState22 = _slicedToArray(_useState21, 2),\n          message = _useState22[0],\n          setMessage = _useState22[1];\n\n      var _useState23 = useState(),\n          _useState24 = _slicedToArray(_useState23, 2),\n          error = _useState24[0],\n          setError = _useState24[1];\n\n      return React.createElement(\"div\", {\n        className: styles.add,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.topDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'Name',\n        name: 'Name',\n        label: 'Asset Name',\n        placeholder: 'Enter The Name Of Your Asset',\n        required: true,\n        type: 'text',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: styles.topDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'Description',\n        name: 'Description',\n        label: 'Asset Description',\n        placeholder: 'Enter The Description Of Your Asset',\n        required: true,\n        type: 'text area',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: styles.lastInputDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'price',\n        name: 'price',\n        label: 'Asset price',\n        placeholder: 'Enter The Price Of Your Asset',\n        required: true,\n        type: 'number',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), loading ? React.createElement(Spinner, {\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }) : fileHash ? React.createElement(\"a\", {\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        href: \"\".concat(site.ipfsGateway, \"/ipfs/\").concat(fileHash),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"ipfs://\", fileHash) : React.createElement(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        multiple: false,\n        handleOnDrop: this.handleOnDrop,\n        disabled: !isIpfsReady,\n        error: error || ipfsError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          marginTop: '2rem'\n        },\n        className: styles.buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Publish Data\")));\n    }\n  }]);\n\n  return Add;\n}(Component);\n\nexport { Add as default };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\commons-0.1.0\\client\\src\\components\\organisms\\Add.tsx"],"names":["React","useState","useEffect","Component","useIpfsApi","formatBytes","addToIpfs","site","Dropzone","styles","Spinner","Button","Input","URL","ipfsNodeUri","hostname","port","protocol","ipfsConfig","replace","host","Add","message","setMessage","error","setError","fileSize","setFileSize","fileSizeReceived","acceptedFiles","ipfs","isIpfsReady","ipfsError","fileHash","setFileHash","loading","setLoading","totalSize","size","cid","add","topDiv","lastInputDiv","ipfsGateway","width","handleOnDrop","marginTop","buttons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react'\r\nimport useIpfsApi, { IpfsConfig } from '../../hooks/use-ipfs-api'\r\nimport { formatBytes, addToIpfs } from '../../utils'\r\nimport { site } from '../../site.config'\r\nimport Dropzone from '../atoms/Dropzone'\r\nimport styles from './Add.module.css'\r\nimport Spinner from '../atoms/Spinner'\r\nimport Button from '../atoms/Button'\r\nimport Input from '../atoms/Form/Input'\r\n\r\nconst { hostname, port, protocol } = new URL(site.ipfsNodeUri)\r\n\r\nconst ipfsConfig: IpfsConfig = {\r\n  protocol: protocol.replace(':', ''),\r\n  host: hostname,\r\n  port: port || '443'\r\n}\r\n\r\nexport default class Add extends Component {\r\n\r\n  constructor() {\r\n    super({});\r\n    const [message, setMessage] = useState()\r\n    const [error, setError] = useState()\r\n    const [fileSize, setFileSize] = useState()\r\n    const [fileSizeReceived] = useState('')\r\n\r\n    useEffect(() => {\r\n      setMessage(`Adding to IPFS<br />  <small>${fileSizeReceived || 0}/${fileSize}</small><br />`)\r\n    }, [fileSize, fileSizeReceived])\r\n  }\r\n\r\n\r\n  handleOnDrop(acceptedFiles: File[]) {\r\n    const { ipfs, isIpfsReady, ipfsError } = useIpfsApi(ipfsConfig)\r\n    const [fileHash, setFileHash] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState()\r\n    const [fileSize, setFileSize] = useState()\r\n\r\n    if (!acceptedFiles[0]) return\r\n\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n    const totalSize = formatBytes(acceptedFiles[0].size, 0)\r\n    setFileSize(totalSize)\r\n\r\n    try {\r\n      const cid = addToIpfs(acceptedFiles, ipfs)\r\n      if (!cid) return\r\n      setFileHash(cid)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setError(`Adding to IPFS failed: ${error.message}`)\r\n      return null\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { ipfs, isIpfsReady, ipfsError } = useIpfsApi(ipfsConfig)\r\n    const [fileHash, setFileHash] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState()\r\n    const [error, setError] = useState()\r\n    return (\r\n      <div className={styles.add}>\r\n\r\n        <div className={styles.topDiv}>\r\n          <Input\r\n            key={'Name'}\r\n            name={'Name'}\r\n            label={'Asset Name'}\r\n            placeholder={'Enter The Name Of Your Asset'}\r\n            required={true}\r\n            type={'text'}\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.topDiv}>\r\n          <Input\r\n            key={'Description'}\r\n            name={'Description'}\r\n            label={'Asset Description'}\r\n            placeholder={'Enter The Description Of Your Asset'}\r\n            required={true}\r\n            type={'text area'}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className={styles.lastInputDiv}>\r\n          <Input\r\n            key={'price'}\r\n            name={'price'}\r\n            label={'Asset price'}\r\n            placeholder={'Enter The Price Of Your Asset'}\r\n            required={true}\r\n            type={'number'}\r\n          />\r\n        </div>\r\n\r\n        {loading ? (\r\n          <Spinner message={message} />\r\n        ) : fileHash ? (\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href={`${site.ipfsGateway}/ipfs/${fileHash}`}\r\n          >\r\n            ipfs://{fileHash}\r\n          </a>\r\n        ) : (\r\n              <div style={{ width: '100%' }}>\r\n                <Dropzone\r\n\r\n                  multiple={false}\r\n                  handleOnDrop={this.handleOnDrop}\r\n                  disabled={!isIpfsReady}\r\n                  error={error || ipfsError}\r\n                />\r\n              </div>\r\n            )}\r\n        <div style={{ marginTop: '2rem' }} className={styles.buttons}>\r\n          <Button primary>Publish Data</Button>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}