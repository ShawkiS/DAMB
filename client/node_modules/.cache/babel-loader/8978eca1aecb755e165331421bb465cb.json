{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { Ocean } from '@oceanprotocol/squid';\nimport { aquariusHost, aquariusPort, aquariusScheme, brizoHost, brizoPort, brizoScheme, brizoAddress, nodeHost, nodePort, nodeScheme, parityHost, parityPort, parityScheme, secretStoreHost, secretStorePort, secretStoreScheme, verbose } from './config/config';\nexport function provideOcean(_x) {\n  return _provideOcean.apply(this, arguments);\n}\n\nfunction _provideOcean() {\n  _provideOcean = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(web3provider) {\n    var nodeUri, aquariusUri, brizoUri, parityUri, secretStoreUri, config, ocean;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            nodeUri = \"\".concat(nodeScheme, \"://\").concat(nodeHost, \":\").concat(nodePort);\n            aquariusUri = \"\".concat(aquariusScheme, \"://\").concat(aquariusHost, \":\").concat(aquariusPort);\n            brizoUri = \"\".concat(brizoScheme, \"://\").concat(brizoHost, \":\").concat(brizoPort);\n            parityUri = \"\".concat(parityScheme, \"://\").concat(parityHost, \":\").concat(parityPort);\n            secretStoreUri = \"\".concat(secretStoreScheme, \"://\").concat(secretStoreHost, \":\").concat(secretStorePort);\n            config = {\n              web3provider: web3provider,\n              nodeUri: nodeUri,\n              aquariusUri: aquariusUri,\n              brizoUri: brizoUri,\n              brizoAddress: brizoAddress,\n              parityUri: parityUri,\n              secretStoreUri: secretStoreUri,\n              verbose: verbose\n            };\n            _context.next = 8;\n            return Ocean.getInstance(config);\n\n          case 8:\n            ocean = _context.sent;\n            return _context.abrupt(\"return\", {\n              ocean: ocean\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _provideOcean.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\DAMB-Marketplace\\client\\src\\ocean.ts"],"names":["Ocean","aquariusHost","aquariusPort","aquariusScheme","brizoHost","brizoPort","brizoScheme","brizoAddress","nodeHost","nodePort","nodeScheme","parityHost","parityPort","parityScheme","secretStoreHost","secretStorePort","secretStoreScheme","verbose","provideOcean","web3provider","nodeUri","aquariusUri","brizoUri","parityUri","secretStoreUri","config","getInstance","ocean"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,sBAAtB;AAGA,SACIC,YADJ,EAEIC,YAFJ,EAGIC,cAHJ,EAIIC,SAJJ,EAKIC,SALJ,EAMIC,WANJ,EAOIC,YAPJ,EAQIC,QARJ,EASIC,QATJ,EAUIC,UAVJ,EAWIC,UAXJ,EAYIC,UAZJ,EAaIC,YAbJ,EAcIC,eAdJ,EAeIC,eAfJ,EAgBIC,iBAhBJ,EAiBIC,OAjBJ,QAkBO,iBAlBP;AAoBA,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO,iBAA4BC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,OADH,aACgBV,UADhB,gBACgCF,QADhC,cAC4CC,QAD5C;AAEGY,YAAAA,WAFH,aAEoBlB,cAFpB,gBAEwCF,YAFxC,cAEwDC,YAFxD;AAGGoB,YAAAA,QAHH,aAGiBhB,WAHjB,gBAGkCF,SAHlC,cAG+CC,SAH/C;AAIGkB,YAAAA,SAJH,aAIkBV,YAJlB,gBAIoCF,UAJpC,cAIkDC,UAJlD;AAKGY,YAAAA,cALH,aAKuBR,iBALvB,gBAK8CF,eAL9C,cAKiEC,eALjE;AAOGU,YAAAA,MAPH,GAOY;AACXN,cAAAA,YAAY,EAAZA,YADW;AAEXC,cAAAA,OAAO,EAAPA,OAFW;AAGXC,cAAAA,WAAW,EAAXA,WAHW;AAIXC,cAAAA,QAAQ,EAARA,QAJW;AAKXf,cAAAA,YAAY,EAAZA,YALW;AAMXgB,cAAAA,SAAS,EAATA,SANW;AAOXC,cAAAA,cAAc,EAAdA,cAPW;AAQXP,cAAAA,OAAO,EAAPA;AARW,aAPZ;AAAA;AAAA,mBAkBwBjB,KAAK,CAAC0B,WAAN,CAAkBD,MAAlB,CAlBxB;;AAAA;AAkBGE,YAAAA,KAlBH;AAAA,6CAoBI;AAAEA,cAAAA,KAAK,EAALA;AAAF,aApBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { Ocean } from '@oceanprotocol/squid'\nimport Web3 from 'web3'\n\nimport {\n    aquariusHost,\n    aquariusPort,\n    aquariusScheme,\n    brizoHost,\n    brizoPort,\n    brizoScheme,\n    brizoAddress,\n    nodeHost,\n    nodePort,\n    nodeScheme,\n    parityHost,\n    parityPort,\n    parityScheme,\n    secretStoreHost,\n    secretStorePort,\n    secretStoreScheme,\n    verbose\n} from './config/config'\n\nexport async function provideOcean(web3provider: Web3) {\n    const nodeUri = `${nodeScheme}://${nodeHost}:${nodePort}`\n    const aquariusUri = `${aquariusScheme}://${aquariusHost}:${aquariusPort}`\n    const brizoUri = `${brizoScheme}://${brizoHost}:${brizoPort}`\n    const parityUri = `${parityScheme}://${parityHost}:${parityPort}`\n    const secretStoreUri = `${secretStoreScheme}://${secretStoreHost}:${secretStorePort}`\n\n    const config = {\n        web3provider,\n        nodeUri,\n        aquariusUri,\n        brizoUri,\n        brizoAddress,\n        parityUri,\n        secretStoreUri,\n        verbose\n    }\n\n    const ocean: Ocean = await Ocean.getInstance(config)\n\n    return { ocean }\n}\n"]},"metadata":{},"sourceType":"module"}