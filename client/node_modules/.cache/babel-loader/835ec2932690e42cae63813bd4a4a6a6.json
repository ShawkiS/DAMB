{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\src\\\\components\\\\organisms\\\\Add.tsx\";\nimport React, { useState, useEffect, Component } from 'react';\nimport useIpfsApi from '../../hooks/use-ipfs-api';\nimport { formatBytes, addToIpfs } from '../../utils';\nimport { site } from '../../site.config';\nimport Dropzone from '../atoms/Dropzone';\nimport styles from './Add.module.css';\nimport Spinner from '../atoms/Spinner';\nimport Button from '../atoms/Button';\nimport Input from '../atoms/Form/Input';\nimport { Ocean } from '@oceanprotocol/squid';\nimport Web3 from 'web3';\n\nvar _ref = new URL(site.ipfsNodeUri),\n    hostname = _ref.hostname,\n    port = _ref.port,\n    protocol = _ref.protocol;\n\nvar ipfsConfig = {\n  protocol: protocol.replace(':', ''),\n  host: hostname,\n  port: port || '443'\n};\nvar web3;\n\nif (window.web3) {\n  web3 = new Web3(window.web3.currentProvider);\n  window.ethereum.enable();\n}\n\nuseEffect(function () {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fileSize = _useState4[0],\n      setFileSize = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 1),\n      fileSizeReceived = _useState6[0];\n\n  setMessage(\"Adding to IPFS<br />\\n     <small>\".concat(fileSizeReceived || 0, \"/\").concat(fileSize, \"</small><br />\"));\n}, [useState()[0], useState('')[0]]);\n\nvar Add =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Add, _Component);\n\n  function Add() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Add);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Add)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.ipfsUrl = new URL(site.ipfsNodeUri);\n    _this.hostname = _this.ipfsUrl.hostname;\n    _this.port = _this.ipfsUrl.port;\n    _this.protocol = _this.ipfsUrl.protocol;\n    _this.ipfsConfig = {\n      protocol: protocol.replace(':', ''),\n      host: hostname,\n      port: port || '443'\n    };\n    _this.state = {\n      ocean: undefined,\n      ddo: undefined\n    };\n    return _this;\n  }\n\n  _createClass(Add, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var ocean;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Ocean.getInstance({\n                  web3Provider: web3,\n                  nodeUri: 'https://nile.dev-ocean.com',\n                  aquariusUri: 'https://aquarius.marketplace.dev-ocean.com',\n                  brizoUri: 'https://brizo.marketplace.dev-ocean.com',\n                  brizoAddress: '0x4aaab179035dc57b35e2ce066919048686f82972',\n                  secretStoreUri: 'https://secret-store.nile.dev-ocean.com',\n                  verbose: true\n                });\n\n              case 2:\n                ocean = _context.sent;\n                this.setState({\n                  ocean: ocean\n                });\n                console.log('Finished loading contracts.');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"handleOnDrop\",\n    value: function () {\n      var _handleOnDrop = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(acceptedFiles) {\n        var _useIpfsApi, ipfs, isIpfsReady, ipfsError, _useState7, _useState8, fileHash, setFileHash, _useState9, _useState10, loading, setLoading, _useState11, _useState12, error, setError, _useState13, _useState14, fileSize, setFileSize, totalSize, cid;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _useIpfsApi = useIpfsApi(ipfsConfig), ipfs = _useIpfsApi.ipfs, isIpfsReady = _useIpfsApi.isIpfsReady, ipfsError = _useIpfsApi.ipfsError;\n                _useState7 = useState(), _useState8 = _slicedToArray(_useState7, 2), fileHash = _useState8[0], setFileHash = _useState8[1];\n                _useState9 = useState(false), _useState10 = _slicedToArray(_useState9, 2), loading = _useState10[0], setLoading = _useState10[1];\n                _useState11 = useState(), _useState12 = _slicedToArray(_useState11, 2), error = _useState12[0], setError = _useState12[1];\n                _useState13 = useState(), _useState14 = _slicedToArray(_useState13, 2), fileSize = _useState14[0], setFileSize = _useState14[1];\n\n                if (acceptedFiles[0]) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                setLoading(true);\n                setError(null);\n                totalSize = formatBytes(acceptedFiles[0].size, 0);\n                setFileSize(totalSize);\n                _context2.prev = 11;\n                _context2.next = 14;\n                return addToIpfs(acceptedFiles, ipfs);\n\n              case 14:\n                cid = _context2.sent;\n\n                if (cid) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 17:\n                setFileHash(cid);\n                setLoading(false);\n                _context2.next = 25;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](11);\n                setError(\"Adding to IPFS failed: \".concat(_context2.t0.message));\n                return _context2.abrupt(\"return\", null);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[11, 21]]);\n      }));\n\n      function handleOnDrop(_x) {\n        return _handleOnDrop.apply(this, arguments);\n      }\n\n      return handleOnDrop;\n    }() //name: string, price: string, ipfsUrl: string\n\n  }, {\n    key: \"Submit\",\n    value: function Submit() {\n      var asset = {\n        main: {\n          name: name,\n          dateCreated: Date.now.toString(),\n          author: 'DAMP Marketplace + address',\n          type: 'file',\n          license: 'CC0: Public Domain',\n          price: 'price',\n          files: [{\n            index: 0,\n            contentType: 'application/zip',\n            checksum: '2bf9d229d110d1976cdf85e9f3256c7f',\n            checksumType: 'MD5',\n            contentLength: '12057507',\n            compression: 'zip',\n            encoding: 'UTF-8',\n            url: ''\n          }]\n        },\n        additionalInformation: {\n          categories: ['Biology'],\n          tags: ['image data', 'classification', 'animals'],\n          description: 'EXAMPLE ONLY ',\n          copyrightHolder: 'Unknown',\n          workExample: 'image path, id, label',\n          links: [{\n            name: 'example model',\n            url: 'https://drive.google.com/open?id=1uuz50RGiAW8YxRcWeQVgQglZpyAebgSM'\n          }],\n          inLanguage: 'en'\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _useIpfsApi2 = useIpfsApi(ipfsConfig),\n          ipfs = _useIpfsApi2.ipfs,\n          isIpfsReady = _useIpfsApi2.isIpfsReady,\n          ipfsError = _useIpfsApi2.ipfsError;\n\n      var _useState15 = useState(),\n          _useState16 = _slicedToArray(_useState15, 2),\n          fileHash = _useState16[0],\n          setFileHash = _useState16[1];\n\n      var _useState17 = useState(false),\n          _useState18 = _slicedToArray(_useState17, 2),\n          loading = _useState18[0],\n          setLoading = _useState18[1];\n\n      var _useState19 = useState(),\n          _useState20 = _slicedToArray(_useState19, 2),\n          message = _useState20[0],\n          setMessage = _useState20[1];\n\n      var _useState21 = useState(),\n          _useState22 = _slicedToArray(_useState21, 2),\n          error = _useState22[0],\n          setError = _useState22[1];\n\n      var _useState23 = useState(),\n          _useState24 = _slicedToArray(_useState23, 2),\n          fileSize = _useState24[0],\n          setFileSize = _useState24[1];\n\n      var _useState25 = useState(''),\n          _useState26 = _slicedToArray(_useState25, 1),\n          fileSizeReceived = _useState26[0];\n\n      return React.createElement(\"div\", {\n        className: styles.add,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.topDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'Name',\n        name: 'Name',\n        label: 'Asset Name',\n        placeholder: 'Enter The Name Of Your Asset',\n        required: true,\n        type: 'text',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: styles.topDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'Description',\n        name: 'Description',\n        label: 'Asset Description',\n        placeholder: 'Enter The Description Of Your Asset',\n        required: true,\n        type: 'text area',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: styles.lastInputDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Input, {\n        key: 'price',\n        name: 'price',\n        label: 'Asset price',\n        placeholder: 'Enter The Price Of Your Asset',\n        required: true,\n        type: 'number',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })), loading ? React.createElement(Spinner, {\n        message: message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }) : fileHash ? React.createElement(\"a\", {\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        href: \"\".concat(site.ipfsGateway, \"/ipfs/\").concat(fileHash),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"ipfs://\", fileHash) : React.createElement(\"div\", {\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Dropzone, {\n        multiple: false,\n        handleOnDrop: this.handleOnDrop,\n        disabled: !isIpfsReady,\n        error: error || ipfsError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        onClick: function onClick() {\n          return _this2.Submit();\n        },\n        style: {\n          marginTop: '2rem'\n        },\n        className: styles.buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \"Publish Data\")));\n    }\n  }]);\n\n  return Add;\n}(Component);\n\nexport { Add as default };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\DAMB-Marketplace\\client\\src\\components\\organisms\\Add.tsx"],"names":["React","useState","useEffect","Component","useIpfsApi","formatBytes","addToIpfs","site","Dropzone","styles","Spinner","Button","Input","Ocean","Web3","URL","ipfsNodeUri","hostname","port","protocol","ipfsConfig","replace","host","web3","window","currentProvider","ethereum","enable","message","setMessage","fileSize","setFileSize","fileSizeReceived","Add","ipfsUrl","state","ocean","undefined","ddo","getInstance","web3Provider","nodeUri","aquariusUri","brizoUri","brizoAddress","secretStoreUri","verbose","setState","console","log","acceptedFiles","ipfs","isIpfsReady","ipfsError","fileHash","setFileHash","loading","setLoading","error","setError","totalSize","size","cid","asset","main","name","dateCreated","Date","now","toString","author","type","license","price","files","index","contentType","checksum","checksumType","contentLength","compression","encoding","url","additionalInformation","categories","tags","description","copyrightHolder","workExample","links","inLanguage","add","topDiv","lastInputDiv","ipfsGateway","width","handleOnDrop","Submit","marginTop","buttons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react'\r\nimport useIpfsApi, { IpfsConfig } from '../../hooks/use-ipfs-api'\r\nimport { formatBytes, addToIpfs } from '../../utils'\r\nimport { site } from '../../site.config'\r\nimport Dropzone from '../atoms/Dropzone'\r\nimport styles from './Add.module.css'\r\nimport Spinner from '../atoms/Spinner'\r\nimport Button from '../atoms/Button'\r\nimport Input from '../atoms/Form/Input'\r\nimport { Ocean } from '@oceanprotocol/squid'\r\nimport Web3 from 'web3'\r\n\r\nconst { hostname, port, protocol } = new URL(site.ipfsNodeUri)\r\n\r\nconst ipfsConfig: IpfsConfig = {\r\n  protocol: protocol.replace(':', ''),\r\n  host: hostname,\r\n  port: port || '443'\r\n}\r\n\r\nlet web3: any\r\n\r\nif (window.web3) {\r\n  web3 = new Web3(window.web3.currentProvider)\r\n  window.ethereum.enable()\r\n}\r\n\r\nuseEffect(() => {\r\n  const [message, setMessage] = useState()\r\n  const [fileSize, setFileSize] = useState()\r\n  const [fileSizeReceived] = useState('')\r\n  setMessage(\r\n    `Adding to IPFS<br />\r\n     <small>${fileSizeReceived || 0}/${fileSize}</small><br />`\r\n  )\r\n}, [useState()[0], useState('')[0]])\r\n\r\nexport default class Add extends Component {\r\n  ipfsUrl = new URL(site.ipfsNodeUri)\r\n\r\n  hostname = this.ipfsUrl.hostname;\r\n  port = this.ipfsUrl.port;\r\n  protocol = this.ipfsUrl.protocol;\r\n\r\n  ipfsConfig: IpfsConfig = {\r\n    protocol: protocol.replace(':', ''),\r\n    host: hostname,\r\n    port: port || '443'\r\n  }\r\n\r\n  state = {\r\n    ocean: undefined,\r\n    ddo: undefined\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const ocean = await Ocean.getInstance({\r\n      web3Provider: web3,\r\n      nodeUri: 'https://nile.dev-ocean.com',\r\n      aquariusUri: 'https://aquarius.marketplace.dev-ocean.com',\r\n      brizoUri: 'https://brizo.marketplace.dev-ocean.com',\r\n      brizoAddress: '0x4aaab179035dc57b35e2ce066919048686f82972',\r\n      secretStoreUri: 'https://secret-store.nile.dev-ocean.com',\r\n      verbose: true\r\n    })\r\n    this.setState({ ocean })\r\n    console.log('Finished loading contracts.')\r\n  }\r\n\r\n  async handleOnDrop(acceptedFiles: File[]) {\r\n\r\n    const { ipfs, isIpfsReady, ipfsError } = useIpfsApi(ipfsConfig)\r\n    const [fileHash, setFileHash] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState()\r\n    const [fileSize, setFileSize] = useState()\r\n    \r\n    if (!acceptedFiles[0]) return\r\n\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n    const totalSize = formatBytes(acceptedFiles[0].size, 0)\r\n    setFileSize(totalSize)\r\n\r\n    try {\r\n      const cid = await addToIpfs(acceptedFiles, ipfs)\r\n      if (!cid) return\r\n      setFileHash(cid)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setError(`Adding to IPFS failed: ${error.message}`)\r\n      return null\r\n    }\r\n  }\r\n\r\n  //name: string, price: string, ipfsUrl: string\r\n  Submit() {\r\n    const asset = {\r\n      main: {\r\n        name: name,\r\n        dateCreated: Date.now.toString(),\r\n        author: 'DAMP Marketplace + address',\r\n        type: 'file',\r\n        license: 'CC0: Public Domain',\r\n        price: 'price',\r\n        files: [\r\n          {\r\n            index: 0,\r\n            contentType: 'application/zip',\r\n            checksum: '2bf9d229d110d1976cdf85e9f3256c7f',\r\n            checksumType: 'MD5',\r\n            contentLength: '12057507',\r\n            compression: 'zip',\r\n            encoding: 'UTF-8',\r\n            url:\r\n              ''\r\n          }\r\n        ]\r\n      },\r\n      additionalInformation: {\r\n        categories: ['Biology'],\r\n        tags: ['image data', 'classification', 'animals'],\r\n        description: 'EXAMPLE ONLY ',\r\n        copyrightHolder: 'Unknown',\r\n        workExample: 'image path, id, label',\r\n        links: [\r\n          {\r\n            name: 'example model',\r\n            url:\r\n              'https://drive.google.com/open?id=1uuz50RGiAW8YxRcWeQVgQglZpyAebgSM'\r\n          }\r\n        ],\r\n        inLanguage: 'en'\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    const { ipfs, isIpfsReady, ipfsError } = useIpfsApi(ipfsConfig)\r\n    const [fileHash, setFileHash] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState()\r\n    const [error, setError] = useState()\r\n    const [fileSize, setFileSize] = useState()\r\n    const [fileSizeReceived] = useState('')\r\n\r\n    return (\r\n      <div className={styles.add}>\r\n\r\n        <div className={styles.topDiv}>\r\n          <Input\r\n            key={'Name'}\r\n            name={'Name'}\r\n            label={'Asset Name'}\r\n            placeholder={'Enter The Name Of Your Asset'}\r\n            required={true}\r\n            type={'text'}\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.topDiv}>\r\n          <Input\r\n            key={'Description'}\r\n            name={'Description'}\r\n            label={'Asset Description'}\r\n            placeholder={'Enter The Description Of Your Asset'}\r\n            required={true}\r\n            type={'text area'}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className={styles.lastInputDiv}>\r\n          <Input\r\n            key={'price'}\r\n            name={'price'}\r\n            label={'Asset price'}\r\n            placeholder={'Enter The Price Of Your Asset'}\r\n            required={true}\r\n            type={'number'}\r\n          />\r\n        </div>\r\n\r\n        {loading ? (\r\n          <Spinner message={message} />\r\n        ) : fileHash ? (\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href={`${site.ipfsGateway}/ipfs/${fileHash}`}\r\n          >\r\n            ipfs://{fileHash}\r\n          </a>\r\n        ) : (\r\n              <div style={{ width: '100%' }}>\r\n                <Dropzone\r\n\r\n                  multiple={false}\r\n                  handleOnDrop={this.handleOnDrop}\r\n                  disabled={!isIpfsReady}\r\n                  error={error || ipfsError}\r\n                />\r\n              </div>\r\n            )}\r\n        <div onClick={() => this.Submit()} style={{ marginTop: '2rem' }} className={styles.buttons}>\r\n          <Button primary>Publish Data</Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}