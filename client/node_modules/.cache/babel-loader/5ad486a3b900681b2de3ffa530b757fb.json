{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\DAMB-Marketplace\\\\client\\\\src\\\\components\\\\organisms\\\\Add.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport useIpfsApi from '../../hooks/use-ipfs-api';\nimport { formatBytes, addToIpfs } from '../../utils';\nimport { site } from '../../site.config';\nimport Dropzone from '../atoms/Dropzone';\nimport styles from './Add.module.css';\nimport Spinner from '../atoms/Spinner';\nimport Button from '../atoms/Button';\nimport Input from '../atoms/Form/Input';\n\nvar _ref = new URL(site.ipfsNodeUri),\n    hostname = _ref.hostname,\n    port = _ref.port,\n    protocol = _ref.protocol;\n\nvar ipfsConfig = {\n  protocol: protocol.replace(':', ''),\n  host: hostname,\n  port: port || '443'\n};\nexport default function Add() {\n  var _useIpfsApi = useIpfsApi(ipfsConfig),\n      ipfs = _useIpfsApi.ipfs,\n      isIpfsReady = _useIpfsApi.isIpfsReady,\n      ipfsError = _useIpfsApi.ipfsError;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      fileHash = _useState2[0],\n      setFileHash = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      fileSize = _useState10[0],\n      setFileSize = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 1),\n      fileSizeReceived = _useState12[0];\n\n  useEffect(function () {\n    setMessage(\"Adding to IPFS<br />\\n       <small>\".concat(fileSizeReceived || 0, \"/\").concat(fileSize, \"</small><br />\"));\n  }, [fileSize, fileSizeReceived]);\n\n  function handleOnDrop(_x) {\n    return _handleOnDrop.apply(this, arguments);\n  }\n\n  function _handleOnDrop() {\n    _handleOnDrop = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(acceptedFiles) {\n      var totalSize, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (acceptedFiles[0]) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              setLoading(true);\n              setError(null);\n              totalSize = formatBytes(acceptedFiles[0].size, 0);\n              setFileSize(totalSize);\n              _context.prev = 6;\n              _context.next = 9;\n              return addToIpfs(acceptedFiles, ipfs);\n\n            case 9:\n              cid = _context.sent;\n\n              if (cid) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 12:\n              setFileHash(cid);\n              setLoading(false);\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](6);\n              setError(\"Adding to IPFS failed: \".concat(_context.t0.message));\n              return _context.abrupt(\"return\", null);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 16]]);\n    }));\n    return _handleOnDrop.apply(this, arguments);\n  }\n\n  function Submit() {\n    console.log('ipfs://' + fileHash);\n  }\n\n  return React.createElement(\"div\", {\n    className: styles.add,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.topDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Input, {\n    key: 'Name',\n    name: 'Name',\n    label: 'Asset Name',\n    placeholder: 'Enter The Name Of Your Asset',\n    required: true,\n    type: 'text',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.topDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Input, {\n    key: 'Description',\n    name: 'Description',\n    label: 'Asset Description',\n    placeholder: 'Enter The Description Of Your Asset',\n    required: true,\n    type: 'text area',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.lastInputDiv,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Input, {\n    key: 'price',\n    name: 'price',\n    label: 'Asset price',\n    placeholder: 'Enter The Price Of Your Asset',\n    required: true,\n    type: 'number',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })), loading ? React.createElement(Spinner, {\n    message: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }) : fileHash ? React.createElement(\"a\", {\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"\".concat(site.ipfsGateway, \"/ipfs/\").concat(fileHash),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"ipfs://\", fileHash) : React.createElement(\"div\", {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Dropzone, {\n    multiple: false,\n    handleOnDrop: handleOnDrop,\n    disabled: !isIpfsReady,\n    error: error || ipfsError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    onClick: function onClick() {\n      return Submit();\n    },\n    style: {\n      marginTop: '2rem'\n    },\n    className: styles.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Button, {\n    primary: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Publish Data\")));\n}","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\DAMB-Marketplace\\client\\src\\components\\organisms\\Add.tsx"],"names":["React","useState","useEffect","useIpfsApi","formatBytes","addToIpfs","site","Dropzone","styles","Spinner","Button","Input","URL","ipfsNodeUri","hostname","port","protocol","ipfsConfig","replace","host","Add","ipfs","isIpfsReady","ipfsError","fileHash","setFileHash","loading","setLoading","message","setMessage","error","setError","fileSize","setFileSize","fileSizeReceived","handleOnDrop","acceptedFiles","totalSize","size","cid","Submit","console","log","add","topDiv","lastInputDiv","ipfsGateway","width","marginTop","buttons"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport useIpfsApi, { IpfsConfig } from '../../hooks/use-ipfs-api'\r\nimport { formatBytes, addToIpfs } from '../../utils'\r\nimport { site } from '../../site.config'\r\nimport Dropzone from '../atoms/Dropzone'\r\nimport styles from './Add.module.css'\r\nimport Spinner from '../atoms/Spinner'\r\nimport Button from '../atoms/Button'\r\nimport Input from '../atoms/Form/Input'\r\n\r\nconst { hostname, port, protocol } = new URL(site.ipfsNodeUri)\r\n\r\nconst ipfsConfig: IpfsConfig = {\r\n  protocol: protocol.replace(':', ''),\r\n  host: hostname,\r\n  port: port || '443'\r\n}\r\n\r\nexport default function Add() {\r\n  \r\n  \r\n  const { ipfs, isIpfsReady, ipfsError } = useIpfsApi(ipfsConfig)\r\n  const [fileHash, setFileHash] = useState()\r\n  const [loading, setLoading] = useState(false)\r\n  const [message, setMessage] = useState()\r\n  const [error, setError] = useState()\r\n  const [fileSize, setFileSize] = useState()\r\n  const [fileSizeReceived] = useState('')\r\n\r\n  useEffect(() => {\r\n    setMessage(\r\n      `Adding to IPFS<br />\r\n       <small>${fileSizeReceived || 0}/${fileSize}</small><br />`\r\n    )\r\n  }, [fileSize, fileSizeReceived])\r\n\r\n  async function handleOnDrop(acceptedFiles: File[]) {\r\n    if (!acceptedFiles[0]) return\r\n\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n    const totalSize = formatBytes(acceptedFiles[0].size, 0)\r\n    setFileSize(totalSize)\r\n\r\n    try {\r\n      const cid = await addToIpfs(acceptedFiles, ipfs)\r\n      if (!cid) return\r\n      setFileHash(cid)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setError(`Adding to IPFS failed: ${error.message}`)\r\n      return null\r\n    }\r\n  }\r\n\r\n  function Submit() {\r\n    console.log('ipfs://' + fileHash)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.add}>\r\n\r\n      <div className={styles.topDiv}>\r\n        <Input\r\n          key={'Name'}\r\n          name={'Name'}\r\n          label={'Asset Name'}\r\n          placeholder={'Enter The Name Of Your Asset'}\r\n          required={true}\r\n          type={'text'}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.topDiv}>\r\n        <Input\r\n          key={'Description'}\r\n          name={'Description'}\r\n          label={'Asset Description'}\r\n          placeholder={'Enter The Description Of Your Asset'}\r\n          required={true}\r\n          type={'text area'}\r\n        />\r\n      </div>\r\n\r\n\r\n      <div className={styles.lastInputDiv}>\r\n        <Input\r\n          key={'price'}\r\n          name={'price'}\r\n          label={'Asset price'}\r\n          placeholder={'Enter The Price Of Your Asset'}\r\n          required={true}\r\n          type={'number'}\r\n        />\r\n      </div>\r\n\r\n      {loading ? (\r\n        <Spinner message={message} />\r\n      ) : fileHash ? (\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          href={`${site.ipfsGateway}/ipfs/${fileHash}`}\r\n        >\r\n          ipfs://{fileHash}\r\n        </a>\r\n      ) : (\r\n            <div style={{ width: '100%' }}>\r\n              <Dropzone\r\n\r\n                multiple={false}\r\n                handleOnDrop={handleOnDrop}\r\n                disabled={!isIpfsReady}\r\n                error={error || ipfsError}\r\n              />\r\n            </div>\r\n          )}\r\n      <div onClick={()=> Submit()} style={{ marginTop: '2rem' }} className={styles.buttons}>\r\n        <Button primary>Publish Data</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}