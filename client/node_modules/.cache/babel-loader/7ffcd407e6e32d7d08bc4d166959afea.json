{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\commons-0.1.0\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { useState, useEffect } from 'react';\nimport useIpfsApi from '../../hooks/use-ipfs-api';\nimport { formatBytes, addToIpfs } from '../../utils';\nimport { site } from '../../site.config';\n\nvar _ref = new URL(site.ipfsNodeUri),\n    hostname = _ref.hostname,\n    port = _ref.port,\n    protocol = _ref.protocol;\n\nvar ipfsConfig = {\n  protocol: protocol.replace(':', ''),\n  host: hostname,\n  port: port || '443'\n};\n\nvar Add =\n/*#__PURE__*/\nfunction () {\n  // const [fileSizeReceived] = \n\n  /**\r\n   *\r\n   */\n  function Add() {\n    _classCallCheck(this, Add);\n\n    this.ipfs = useIpfsApi(ipfsConfig).ipfs;\n    this.isIpfsReady = useIpfsApi(ipfsConfig).isIpfsReady;\n    this.ipfsError = useIpfsApi(ipfsConfig).ipfsError;\n    this.fileHash = useState()[0];\n    this.setFileHash = useState()[1];\n    this.loading = useState(false)[0];\n    this.setLoading = useState(false)[1];\n    this.message = useState()[0];\n    this.setMessage = useState()[1];\n    this.error = useState()[0];\n    this.setError = useState()[1];\n    this.fileSize = useState()[0];\n    this.setFileSize = useState()[1];\n    this.fileSizeReceived = useState('')[0];\n    useEffect(function () {//  this.setMessage(`Adding to IPFS<br />  <small>${this.fileSizeReceived || 0}/${this.fileSize}</small><br />`)\n    }, [this.fileSize, this.fileSizeReceived]);\n  }\n\n  _createClass(Add, [{\n    key: \"handleOnDrop\",\n    value: function () {\n      var _handleOnDrop = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(acceptedFiles) {\n        var totalSize, cid;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (acceptedFiles[0]) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                setLoading(true);\n                setError(null);\n                totalSize = formatBytes(acceptedFiles[0].size, 0);\n                setFileSize(totalSize);\n                _context.prev = 6;\n                _context.next = 9;\n                return addToIpfs(acceptedFiles, ipfs);\n\n              case 9:\n                cid = _context.sent;\n\n                if (cid) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 12:\n                setFileHash(cid);\n                setLoading(false);\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](6);\n                setError(\"Adding to IPFS failed: \".concat(_context.t0.message));\n                return _context.abrupt(\"return\", null);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[6, 16]]);\n      }));\n\n      function handleOnDrop(_x) {\n        return _handleOnDrop.apply(this, arguments);\n      }\n\n      return handleOnDrop;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return {// <div className={styles.add}>\n        //   <div className={styles.topDiv}>\n        //     <Input\n        //       key={'Name'}\n        //       name={'Name'}\n        //       label={'Asset Name'}\n        //       placeholder={'Enter The Name Of Your Asset'}\n        //       required={true}\n        //       type={'text'}\n        //     />\n        //   </div>\n        //   <div className={styles.topDiv}>\n        //     <Input\n        //       key={'Description'}\n        //       name={'Description'}\n        //       label={'Asset Description'}\n        //       placeholder={'Enter The Description Of Your Asset'}\n        //       required={true}\n        //       type={'text area'}\n        //     />\n        //   </div>\n        //   <div className={styles.lastInputDiv}>\n        //     <Input\n        //       key={'price'}\n        //       name={'price'}\n        //       label={'Asset price'}\n        //       placeholder={'Enter The Price Of Your Asset'}\n        //       required={true}\n        //       type={'number'}\n        //     />\n        //   </div>\n        //   {loading ? (\n        //     <Spinner message={message} />\n        //   ) : fileHash ? (\n        //     <a\n        //       target=\"_blank\"\n        //       rel=\"noopener noreferrer\"\n        //       href={`${site.ipfsGateway}/ipfs/${fileHash}`}\n        //     >\n        //       ipfs://{fileHash}\n        //     </a>\n        //   ) : (\n        //         <div style={{ width: '100%' }}>\n        //           <Dropzone\n        //             multiple={false}\n        //             handleOnDrop={handleOnDrop}\n        //             disabled={!isIpfsReady}\n        //             error={error || ipfsError}\n        //           />\n        //         </div>\n        //       )}\n        //   <div style={{ marginTop: '2rem' }} className={styles.buttons}>\n        //     <Button primary>Publish Data</Button>\n        //   </div>\n        // </div>\n      };\n    }\n  }]);\n\n  return Add;\n}();\n\nexport { Add as default };","map":{"version":3,"sources":["C:\\Users\\ASUS\\Desktop\\commons-0.1.0\\client\\src\\components\\organisms\\Add.tsx"],"names":["useState","useEffect","useIpfsApi","formatBytes","addToIpfs","site","URL","ipfsNodeUri","hostname","port","protocol","ipfsConfig","replace","host","Add","ipfs","isIpfsReady","ipfsError","fileHash","setFileHash","loading","setLoading","message","setMessage","error","setError","fileSize","setFileSize","fileSizeReceived","acceptedFiles","totalSize","size","cid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport useIpfsApi, { IpfsConfig } from '../../hooks/use-ipfs-api'\r\nimport { formatBytes, addToIpfs } from '../../utils'\r\nimport { site } from '../../site.config'\r\nimport Dropzone from '../atoms/Dropzone'\r\nimport styles from './Add.module.css'\r\nimport Spinner from '../atoms/Spinner'\r\nimport Button from '../atoms/Button'\r\nimport Input from '../atoms/Form/Input'\r\n\r\nconst { hostname, port, protocol } = new URL(site.ipfsNodeUri)\r\n\r\nconst ipfsConfig: IpfsConfig = {\r\n  protocol: protocol.replace(':', ''),\r\n  host: hostname,\r\n  port: port || '443'\r\n}\r\n\r\nexport default class Add {\r\n  \r\n  // const [fileSizeReceived] = \r\n\r\n  ipfs = useIpfsApi(ipfsConfig).ipfs;\r\n  isIpfsReady = useIpfsApi(ipfsConfig).isIpfsReady;\r\n  ipfsError = useIpfsApi(ipfsConfig).ipfsError;\r\n  fileHash = useState()[0];\r\n  setFileHash = useState()[1];\r\n  loading = useState(false)[0];\r\n  setLoading = useState(false)[1];\r\n  message = useState()[0];\r\n  setMessage = useState()[1];\r\n  error = useState()[0];\r\n  setError = useState()[1];\r\n  fileSize = useState()[0];\r\n  setFileSize = useState()[1];\r\n  fileSizeReceived = useState('')[0];\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    useEffect(() => {\r\n    //  this.setMessage(`Adding to IPFS<br />  <small>${this.fileSizeReceived || 0}/${this.fileSize}</small><br />`)\r\n    }, [this.fileSize, this.fileSizeReceived])\r\n  }\r\n\r\n \r\n\r\n   async handleOnDrop(acceptedFiles: File[]) {\r\n    if (!acceptedFiles[0]) return\r\n\r\n    setLoading(true)\r\n    setError(null)\r\n\r\n    const totalSize = formatBytes(acceptedFiles[0].size, 0)\r\n    setFileSize(totalSize)\r\n\r\n    try {\r\n      const cid = await addToIpfs(acceptedFiles, ipfs)\r\n      if (!cid) return\r\n      setFileHash(cid)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setError(`Adding to IPFS failed: ${error.message}`)\r\n      return null\r\n    }\r\n  }\r\n render(){\r\n  return ( {\r\n    // <div className={styles.add}>\r\n\r\n    //   <div className={styles.topDiv}>\r\n    //     <Input\r\n    //       key={'Name'}\r\n    //       name={'Name'}\r\n    //       label={'Asset Name'}\r\n    //       placeholder={'Enter The Name Of Your Asset'}\r\n    //       required={true}\r\n    //       type={'text'}\r\n    //     />\r\n    //   </div>\r\n\r\n    //   <div className={styles.topDiv}>\r\n    //     <Input\r\n    //       key={'Description'}\r\n    //       name={'Description'}\r\n    //       label={'Asset Description'}\r\n    //       placeholder={'Enter The Description Of Your Asset'}\r\n    //       required={true}\r\n    //       type={'text area'}\r\n    //     />\r\n    //   </div>\r\n\r\n\r\n    //   <div className={styles.lastInputDiv}>\r\n    //     <Input\r\n    //       key={'price'}\r\n    //       name={'price'}\r\n    //       label={'Asset price'}\r\n    //       placeholder={'Enter The Price Of Your Asset'}\r\n    //       required={true}\r\n    //       type={'number'}\r\n    //     />\r\n    //   </div>\r\n\r\n    //   {loading ? (\r\n    //     <Spinner message={message} />\r\n    //   ) : fileHash ? (\r\n    //     <a\r\n    //       target=\"_blank\"\r\n    //       rel=\"noopener noreferrer\"\r\n    //       href={`${site.ipfsGateway}/ipfs/${fileHash}`}\r\n    //     >\r\n    //       ipfs://{fileHash}\r\n    //     </a>\r\n    //   ) : (\r\n    //         <div style={{ width: '100%' }}>\r\n    //           <Dropzone\r\n\r\n    //             multiple={false}\r\n    //             handleOnDrop={handleOnDrop}\r\n    //             disabled={!isIpfsReady}\r\n    //             error={error || ipfsError}\r\n    //           />\r\n    //         </div>\r\n    //       )}\r\n    //   <div style={{ marginTop: '2rem' }} className={styles.buttons}>\r\n    //     <Button primary>Publish Data</Button>\r\n    //   </div>\r\n    // </div>\r\n  }\r\n  );\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}